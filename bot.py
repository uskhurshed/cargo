import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥ üìç", callback_data='address'), InlineKeyboardButton("–ù–∞—Ä—Ö–Ω–æ–º–∞ üí≤", callback_data='prices')],
        [InlineKeyboardButton("–ú–æ–ª“∑–æ–∏ –º–∞–Ω—ä—à—É–¥–∞ ‚ùå", callback_data='prohibited'), InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç üë§", callback_data='contact')],
        [InlineKeyboardButton("–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥ üîç", callback_data='track_code')],
        [InlineKeyboardButton("–û–±—É–Ω–∞ —à—É–¥–∞–Ω üë§", callback_data='subscribe')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'address':
        await query.edit_message_text(text="–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥: ...")
    elif data == 'prices':
        await query.edit_message_text(text="–ù–∞—Ä—Ö–Ω–æ–º–∞: ...")
    elif data == 'prohibited':
        await query.edit_message_text(text="–ú–æ–ª“∑–æ–∏ –º–∞–Ω—ä—à—É–¥–∞: ...")
    elif data == 'contact':
        await query.edit_message_text(text="–ö–æ–Ω—Ç–∞–∫—Ç: ...")
    elif data == 'track_code':
        await query.edit_message_text(text="–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥: ...")
    elif data == 'subscribe':
        await query.edit_message_text(text="–û–±—É–Ω–∞—Ä–æ –±–∞ –¥–∞—Å—Ç–≥–∏—Ä”£ –≥–∏—Ä–∏—Ñ—Ç–µ–¥!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.')

def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
    TOKEN = '7463604205:AAFX7fk2JTk3UHrZQp0NBl9w9KOfebVBXd0'

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
