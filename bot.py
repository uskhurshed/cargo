import logging
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
try:
    data = pd.read_csv('data.csv', encoding='latin1', delimiter=';')
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ data.csv")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ data.csv: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        ["–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥ üìç", "–ù–∞—Ä—Ö–Ω–æ–º–∞ üí≤"],
        ["–ú–æ–ª“≥–æ–∏ –º–∞–Ω—ä—à—É–¥–∞ ‚ùå", "–ö–æ–Ω—Ç–∞–∫—Ç üë§"],
        ["–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥ üîç"]
        # , ["–û–±—É–Ω–∞ —à—É–¥–∞–Ω üë§"]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text('–ú–µ–Ω—é:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥ üìç":
        response = "1) –ù–û–ú –í–ê –ù–û–ú–ï–†–ò –®–£–ú–û \n2)13711652794\n3) ÂπøÂ∑ûÂ∏ÇËçîÊπæÂå∫ÁéØÂ∏ÇË•øË∑ØÈªëÂ±±‰∏âË°ó20Âè∑ÂÆáÂÆôÈûãÂüéEÂå∫113-119Ê°£8 Al-Kh /–®–∞—Ö—Ä/–ù–æ–º –≤–∞ –Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"
        await update.message.reply_text(response)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_photo("https://raw.githubusercontent.com/uskhurshed/cargo/master/photo_2024-10-08_18-58-32.jpg")
    
    elif text == "–ù–∞—Ä—Ö–Ω–æ–º–∞ üí≤":
        response = "–ù–∞—Ä—Ö–Ω–æ–º–∞:\n1–∫–≥ - 2,5$\n1–∫—É–± - 250$"
        await update.message.reply_text(response)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_photo("https://raw.githubusercontent.com/uskhurshed/cargo/master/photo_2024-10-08_18-58-32.jpg")
    
    elif text == "–ú–æ–ª“≥–æ–∏ –º–∞–Ω—ä—à—É–¥–∞ ‚ùå":
        response = "–ö–ê–†–ì–û–ò –ú–û –•–ê–ú–ò–ù –ì–£–ù–ê –ß–ò–ó–û–†–ê “ö–ê–ë–£–õ –ù–ê–ú–ï–ö–£–ù–ê–î!\n1. –î–æ—Ä—É–≤–æ—Ä–∏ (–ø–∞—Ä–∞—à–æ–∫ —Ç–∞–±–ª–µ—Ç–∫–∞ –¥–æ—Ä—É—Ö–æ–∏ –æ–±–∞–∫–∏)..."
        await update.message.reply_text(response)

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç üë§":
        response = "–ö–æ–Ω—Ç–∞–∫—Ç : www.instagram.com/somon_sugd_cargo"
        await update.message.reply_text(response)

    elif text == "–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥ üîç":
        response = "–¢—Ä–µ–∫-–∫–æ–¥–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –Ω–∞–º–æ–µ–¥:"
        await update.message.reply_text(response)

    else:
        response = None

    if response:
        await update.message.reply_text(response)
    else:
        await check_track_code(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫-–∫–æ–¥–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫-–∫–æ–¥–∞
async def check_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    track_code = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥: {track_code}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫-–∫–æ–¥–∞
    result = data[data['code'] == track_code]
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}")

    if not result.empty:
        status_china = result['china'].values[0]
        status_khujand = result['khujand'].values[0]
        arrival_date = result['arrival_date'].values[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å–∫–ª–∞–¥

        if status_khujand:
            response = f"–ë–æ—Ä–∏ –®—É–º–æ –±–æ —Ç—Ä–µ–∫-–∫–æ–¥–∏ {track_code} –±–∞ –•—É—á–∞–Ω–¥ –æ–º–∞–¥–∞–∞—Å—Ç, –º—É–Ω—Ç–∞–∑–∏—Ä–∏ –∑–∞–Ω–≥ —à–∞–≤–µ–¥."
        elif status_china:
            response = (f"–ë–æ—Ä–∏ –®—É–º–æ –±–æ —Ç—Ä–µ–∫-–∫–æ–¥–∏ {track_code} –±–∞ —Å–∫–ª–∞–¥–∏ –•–∏—Ç–æ–π —Å–∞–Ω–∞–∏ {arrival_date} –∫–∞–±—É–ª —à—É–¥–∞–∞—Å—Ç –≤–∞ —Ä—É–∑—Ö–æ–∏ –Ω–∞–∑–¥–∏–∫ –±–∞ –•—É—á–∞–Ω–¥ –æ–º–∞–¥–∞ –º–µ—Ä–∞—Å–∞–¥.")
        else:
            response = f"–ë–æ—Ä–∏ –®—É–º–æ –±–æ —Ç—Ä–µ–∫-–∫–æ–¥–∏ {track_code} —Ö–æ–ª–æ –±–∞ —Å–∫–ª–∞–¥–∏ –•–∏—Ç–æ–π –∫–∞–±—É–ª –Ω–∞—à—É–∞–∞—Å—Ç."
    else:
        response = f"–ë–æ—Ä–∏ –®—É–º–æ –±–æ —Ç—Ä–µ–∫-–∫–æ–¥–∏ {track_code} —Ö–æ–ª–æ –±–∞ —Å–∫–ª–∞–¥–∏ –•–∏—Ç–æ–π –∫–∞–±—É–ª –Ω–∞—à—É–∞–∞—Å—Ç."

    logger.info(f"–û—Ç–≤–µ—Ç: {response}")
    await update.message.reply_text(response)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.')


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
    TOKEN = '7463604205:AAFX7fk2JTk3UHrZQp0NBl9w9KOfebVBXd0'

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫ –∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
