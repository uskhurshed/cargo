import logging
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
try:
    data = pd.read_csv('data.csv', encoding='latin1', delimiter=';')
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ data.csv")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ data.csv: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        ["–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥ üìç", "–ù–∞—Ä—Ö–Ω–æ–º–∞ üí≤"],
        ["–ú–æ–ª“∑–æ–∏ –º–∞–Ω—ä—à—É–¥–∞ ‚ùå", "–ö–æ–Ω—Ç–∞–∫—Ç üë§"],
        ["–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥ üîç"],
        ["–û–±—É–Ω–∞ —à—É–¥–∞–Ω üë§"]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text('–ú–µ–Ω—é:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "–ê–¥—Ä–µ—Å–∏ —Å–∫–ª–∞–¥ üìç":
        response = "1) –ù–û–ú –í–ê –ù–û–ú–ï–†–ò –®–£–ú–û \n2)15857907645\n3) ÊµôÊ±üÁúÅ‰πâ‰πåÂ∏ÇÊ±ü‰∏úË°óÈÅìÊ¢ÖÊπñÊñ∞Êùë14Ê†ã3ÂçïÂÖÉ201ÂÆ§ sugd/ \n4)—à–∞—Ö—Ä/–Ω–æ–º –≤–∞ –Ω–æ–º–µ—Ä–∏ –¥–∞—Å—Ç–∏–∏ —à—É–º–æ"
    elif text == "–ù–∞—Ä—Ö–Ω–æ–º–∞ üí≤":
        response = "–ù–∞—Ä—Ö–Ω–æ–º–∞:\n\n1–∫–≥ - 2,5$\n\n1–∫—É–± - 280$\n\n–ê–∑ 500–≥—Ä–∞–º –∫–∞–º 20—Å"
    elif text == "–ú–æ–ª“∑–æ–∏ –º–∞–Ω—ä—à—É–¥–∞ ‚ùå":
        response = "–ö–ê–†–ì–û–ò –ú–û –•–ê–ú–ò–ù –ì–£–ù–ê –ß–ò–ó–û–†–ê “ö–ê–ë–£–õ –ù–ê–ú–ï–ö–£–ù–ê–î!\n\n1. –î–æ—Ä—É–≤–æ—Ä–∏ (–ø–∞—Ä–∞—à–æ–∫ —Ç–∞–±–ª–µ—Ç–∫–∞ –¥–æ—Ä—É—Ö–æ–∏ –æ–±–∞–∫–∏).\n\n2. “≤–∞–º–∞–∏ –Ω–∞–º—É–¥–∏ —á–∏–∑–µ –∫–∏ –æ–±–∞–∫–∏ —Ö–∞—Å—Ç–∞–Ω–¥ (–î—É—Ö–∏ –≤–∞ “ì–∞–π—Ä–∞).\n\n3. “≤–∞–º–∞–∏ –Ω–∞–º—É–¥–∏ —Å–∏–ª–æ“≥–∏ —Å–∞—Ä–¥ (–∫–æ—Ä—á–∞, —ç–ª–µ–∫—Ç—Ä–æ—à–æ–∫–µ—Ä –±–∞ –º–æ–Ω–∞–Ω–¥–∏ –∏–Ω—Ö–æ, –±–∏—Ç–∞ –≤–∞ “ì–∞–π—Ä–∞) —É–º—É–º–∞–Ω –º–∞–Ω—ä –∞—Å—Ç.\n\n4. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–∏–≥–∞—Ä–µ—Ç, –∫–∞–ª—è–Ω –±–∞ –º–æ–Ω–∞–Ω–¥–∏ —Ö–∞–º–∏–Ω —á–∏–∑–æ –∫–∞–±—É–ª –Ω–∞–º–µ–∫—É–Ω–µ–º.\n\n–ê–≥–∞—Ä —è–≥–æ–Ω —á–∏–∑–∏ —à–∏—à–∞–≥–∏–Ω –¥–æ—à—Ç–∞ –±–æ—à–µ–¥ –ø–µ—à–∞–∫–∏ –±–æ –∞–¥–º–∏–Ω –º–∞—Å–ª–∏—Ö–∞—Ç –∫—É–Ω–µ–¥."
    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç üë§":
        response = "–ö–æ–Ω—Ç–∞–∫—Ç : www.instagram.com/somon_sugd_cargo"
    elif text == "–¢–∞—Ñ—Ç–∏—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥ üîç":
        response = "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥:"
    elif text == "–û–±—É–Ω–∞ —à—É–¥–∞–Ω üë§":
        response = "–û–±—É–Ω–∞—Ä–æ –±–∞ –¥–∞—Å—Ç–≥–∏—Ä”£ –≥–∏—Ä–∏—Ñ—Ç–µ–¥!"
    else:
        response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫-–∫–æ–¥–∞
async def check_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    track_code = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥: {track_code}")
    result = data[data['code'] == int(track_code)]
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}")

    if not result.empty:
        status_china = result['china'].values[0]
        status_khujand = result['khujand'].values[0]
        response = f"–¢—Ä–µ–∫-–∫–æ–¥: {track_code}\n"

        if status_khujand:
            response += "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É –ø—Ä–∏–±—ã–ª –≤ –•—É–¥–∂–∞–Ω–¥, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        elif status_china:
            response += "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É –ø—Ä–∏–±—ã–ª –≤ –ö–∏—Ç–∞–π –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –•—É–¥–∂–∞–Ω–¥ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏."
        else:
            response += "–í–∞—à —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –ø—Ä–∏—à–µ–ª –Ω–∞ —Å–∫–ª–∞–¥."
    else:
        response = "–í–∞—à —Ç—Ä–µ–∫-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    logger.info(f"–û—Ç–≤–µ—Ç: {response}")
    await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
    TOKEN = '7463604205:AAFX7fk2JTk3UHrZQp0NBl9w9KOfebVBXd0'

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^\d+$'), check_track_code))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
